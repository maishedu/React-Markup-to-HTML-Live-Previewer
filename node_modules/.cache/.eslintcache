[{"/Users/maishedu/Desktop/React Challenge/src/index.js":"1","/Users/maishedu/Desktop/React Challenge/src/App.js":"2","/Users/maishedu/Desktop/React Challenge/src/components/blogeditor/blogeditor.js":"3","/Users/maishedu/Desktop/React Challenge/src/components/toolbar/toolbar.js":"4"},{"size":468,"mtime":1683571935288,"results":"5","hashOfConfig":"6"},{"size":179,"mtime":1683590248653,"results":"7","hashOfConfig":"6"},{"size":4080,"mtime":1683589733836,"results":"8","hashOfConfig":"6"},{"size":1133,"mtime":1683588460776,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mkfqcn",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maishedu/Desktop/React Challenge/src/index.js",[],[],"/Users/maishedu/Desktop/React Challenge/src/App.js",[],[],"/Users/maishedu/Desktop/React Challenge/src/components/blogeditor/blogeditor.js",["23","24"],[],"import React,{useState,useEffect} from 'react';\nimport './blogeditor.css';\nimport {marked} from \"marked\";\nimport  * as DOMPurify from 'dompurify';\nimport Toolbar from \"../toolbar/toolbar\";\nimport Swal from \"sweetalert2\";\n\n\n\nfunction Blogeditor(props) {\n    //state management\n    const [input, setInput] = useState(\"\");\n    const [preview, setPreview] = useState(\"\");\n    const [theme, setTheme] = useState('light');\n\n//load draft if it exists\n    useEffect(()=>{\n        const draft = localStorage.getItem(\"draft\");\n        if(draft){\n            setInput(draft);\n            setPreview(DOMPurify.sanitize(marked(draft)));\n        }\n    },[])\n\n//On typing save content to the state\n    const handleChange = (event)=>{\n        setInput(event.target.value);\n        //preview state sanitize and convert markup to HTML\n        setPreview(DOMPurify.sanitize(marked(event.target.value)));\n    }\n    //format texts\n    const handleFormat = (syntax,type)=>{\n        //select  start position of the highlighted text\n        const selectionStart = document.querySelector(\".markdown-input\").selectionStart;\n        //select end position of the highlighted text\n        const selectionEnd = document.querySelector(\".markdown-input\").selectionEnd;\n        //get full highlighted text\n        const selectedText = input.substring(selectionStart, selectionEnd);\n\n        let newText = \"\";\n//Transform the input text by including the formatting to the highlighted texts\n        if (type == \"heading\") {\n            newText = input.substring(0, selectionStart) + syntax + \" \" + selectedText + \"\\n\" + input.substring(selectionEnd);\n        }if(type === \"image\"){\n            const imageSyntax = `![alt text](${syntax})`;\n            newText = input.substring(0, selectionStart) + marked(imageSyntax) + input.substring(selectionEnd);\n        } else {\n            newText = input.substring(0, selectionStart) + syntax + selectedText + syntax + input.substring(selectionEnd);\n        }\n        setInput(newText);\n        setPreview(DOMPurify.sanitize(marked(newText)));\n\n    }\n    //save draft to local storage\n    const saveDraft = ()=>{\n        localStorage.setItem(\"draft\",input);\n        Swal.fire({\n            icon: 'success',\n            title: 'Successful',\n            text: 'Draft Saved Successfully'\n        })\n    }\n    //publish and clear text area\n    const publishBlog = ()=>{\n         localStorage.setItem(\"blog\",input);\n         localStorage.removeItem(\"draft\");\n        Swal.fire({\n            icon: 'success',\n            title: 'Successful',\n            text: 'Blog Published Successfully'\n        })\n         setInput(\"\");\n         setPreview(\"\");\n    }\n    //switch between light and dark theme\n    const toggleTheme = () => {\n        setTheme(theme === 'light' ? 'dark' : 'light');\n    };\n\n    return (\n        <div className={`section__blogeditor ${theme}`}>\n            <div className=\"blog-editor\">\n                <Toolbar  onFormat={handleFormat}/>\n                    <textarea\n                        className={`markdown-input ${theme}`}\n                        value={input}\n                        rows=\"50\" cols=\"70\"\n                        onChange={handleChange}\n                        placeholder=\"Write your blog post in Markdown format here...\"\n                    />\n                <div className=\"buttons\">\n                    <button onClick={()=>saveDraft()}>Save Draft</button>\n                    <button onClick={()=>publishBlog()}>Publish</button>\n                </div>\n            </div>\n            <div className=\"preview__viewer\">\n                <div className=\"preview__viewer-buttons\">\n                    <button onClick={()=>toggleTheme()}>\n                        {`Toggle ${theme == 'light' ? 'dark mode':'light mode' }`}\n                    </button>\n                </div>\n                <div className={`preview ${theme}`}>\n                    <div\n                        dangerouslySetInnerHTML={{__html: preview}}\n                    />\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Blogeditor;","/Users/maishedu/Desktop/React Challenge/src/components/toolbar/toolbar.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":42,"column":18,"nodeType":"27","messageId":"28","endLine":42,"endColumn":20},{"ruleId":"25","severity":1,"message":"26","line":99,"column":42,"nodeType":"27","messageId":"28","endLine":99,"endColumn":44},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]