{"ast":null,"code":"/**\n * marked v5.0.1 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nlet defaults = getDefaults();\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nconst noopTest = {\n  exec: function noopTest() {}\n};\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-mangle.');\n  }\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-gfm-heading-id.');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += '\\n' + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n        return item;\n      }\n    }\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n  emStrong(src, maskedSrc) {\n    let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = {\n  ...block\n};\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = {\n  ...inline\n};\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n  // em-dashes\n  .replace(/---/g, '\\u2014')\n  // en-dashes\n  .replace(/--/g, '\\u2013')\n  // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n  // closing singles & apostrophes\n  .replace(/'/g, '\\u2019')\n  // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n  // closing doubles\n  .replace(/\"/g, '\\u201d')\n  // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n    code = code.replace(/\\n$/, '') + '\\n';\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n  html(html, block) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n  em(text) {\n    return text;\n  }\n  codespan(text) {\n    return text;\n  }\n  del(text) {\n    return text;\n  }\n  html(text) {\n    return text;\n  }\n  text(text) {\n    return text;\n  }\n  link(href, title, text) {\n    return '' + text;\n  }\n  image(href, title, text) {\n    return '' + text;\n  }\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value.toLowerCase().trim()\n    // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '')\n    // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens) {\n    let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n        case 'table':\n          {\n            header = '';\n\n            // header\n            cell = '';\n            l2 = token.header.length;\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n              body += this.renderer.tablerow(cell);\n            }\n            out += this.renderer.table(header, body);\n            continue;\n          }\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n        case 'html':\n          {\n            out += this.renderer.html(token.text, token.block);\n            continue;\n          }\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n}\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n  static passThroughHooks = new Set(['preprocess', 'postprocess']);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\nfunction onError(silent, async, callback) {\n  return e => {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (silent) {\n      const msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n}\nfunction parseMarkdown(lexer, parser) {\n  return (src, opt, callback) => {\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n    const origOpt = {\n      ...opt\n    };\n    opt = {\n      ...marked.defaults,\n      ...origOpt\n    };\n    const throwError = onError(opt.silent, opt.async, callback);\n\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n    }\n    checkDeprecations(opt, callback);\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n      const done = function (err) {\n        let out;\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              marked.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? throwError(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      let pending = 0;\n      marked.walkTokens(tokens, function (token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, function (err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.walkTokens ? Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options = marked.setOptions = function (opt) {\n  marked.defaults = {\n    ...marked.defaults,\n    ...opt\n  };\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  args.forEach(pack => {\n    // copy options to new object\n    const opts = {\n      ...pack\n    };\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async || false;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = function () {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse Hooks extensions --== //\n    if (pack.hooks) {\n      const hooks = marked.defaults.hooks || new Hooks();\n      for (const prop in pack.hooks) {\n        const prevHook = hooks[prop];\n        if (Hooks.passThroughHooks.has(prop)) {\n          hooks[prop] = arg => {\n            if (marked.defaults.async) {\n              return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                return prevHook.call(hooks, ret);\n              });\n            }\n            const ret = pack.hooks[prop].call(hooks, arg);\n            return prevHook.call(hooks, ret);\n          };\n        } else {\n          hooks[prop] = function () {\n            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n            let ret = pack.hooks[prop].apply(hooks, args);\n            if (ret === false) {\n              ret = prevHook.apply(hooks, args);\n            }\n            return ret;\n          };\n        }\n      }\n      opts.hooks = hooks;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function (token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function (tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table':\n        {\n          for (const cell of token.header) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(marked.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n      case 'list':\n        {\n          values = values.concat(marked.walkTokens(token.items, callback));\n          break;\n        }\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              values = values.concat(marked.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(marked.walkTokens(token.tokens, callback));\n          }\n        }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Hooks, Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkDeprecations","callback","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","arguments","undefined","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","Object","create","inlineQueue","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","onError","message","msg","Promise","resolve","reject","parseMarkdown","origOpt","marked","throwError","prototype","done","err","pending","setTimeout","then","all","catch","setOptions","use","childTokens","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","apply","prop","_len3","_key3","prevTokenizer","_len4","_key4","prevHook","has","arg","_len5","_key5","values","concat"],"sources":["/Users/maishedu/Desktop/React Challenge/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v5.0.1 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-mangle.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-gfm-heading-id.');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nfunction onError(silent, async, callback) {\n  return (e) => {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (silent) {\n      const msg = '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n}\n\nfunction parseMarkdown(lexer, parser) {\n  return (src, opt, callback) => {\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n\n    const origOpt = { ...opt };\n    opt = { ...marked.defaults, ...origOpt };\n    const throwError = onError(opt.silent, opt.async, callback);\n\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type '\n        + Object.prototype.toString.call(src) + ', string expected'));\n    }\n\n    checkDeprecations(opt, callback);\n\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n\n      const done = function(err) {\n        let out;\n\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              marked.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n\n        opt.highlight = highlight;\n\n        return err\n          ? throwError(err)\n          : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n\n      if (!tokens.length) return done();\n\n      let pending = 0;\n      marked.walkTokens(tokens, function(token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, function(err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n\n      if (pending === 0) {\n        done();\n      }\n\n      return;\n    }\n\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n        .then(src => lexer(src, opt))\n        .then(tokens => opt.walkTokens ? Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n        .then(tokens => parser(tokens, opt))\n        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n        .catch(throwError);\n    }\n\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  marked.defaults = { ...marked.defaults, ...opt };\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = { ...pack };\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async || false;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse Hooks extensions --== //\n    if (pack.hooks) {\n      const hooks = marked.defaults.hooks || new Hooks();\n      for (const prop in pack.hooks) {\n        const prevHook = hooks[prop];\n        if (Hooks.passThroughHooks.has(prop)) {\n          hooks[prop] = (arg) => {\n            if (marked.defaults.async) {\n              return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                return prevHook.call(hooks, ret);\n              });\n            }\n\n            const ret = pack.hooks[prop].call(hooks, arg);\n            return prevHook.call(hooks, ret);\n          };\n        } else {\n          hooks[prop] = (...args) => {\n            let ret = pack.hooks[prop].apply(hooks, args);\n            if (ret === false) {\n              ret = prevHook.apply(hooks, args);\n            }\n            return ret;\n          };\n        }\n      }\n      opts.hooks = hooks;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}